// app/lib/overtimePdfGenerator.ts

import { jsPDF, TextOptionsLight } from 'jspdf';
import autoTable from 'jspdf-autotable';
import qrcode from 'qrcode';
import { OvertimeRequest, User } from '@prisma/client';

// Define a type for the combined request data
type OvertimeRequestWithUser = OvertimeRequest & { user: User };
type TableRow = { key: string; value: string };

// --- Reusable Header Function ---
const addHeader = (doc: jsPDF, qrCodeDataURL: string) => {
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(18);
  doc.text('AVOPRO EPZ LIMITED', 20, 20);

  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  doc.text('P.O. Box 12345 - 00100', doc.internal.pageSize.getWidth() / 2, 15, { align: 'center' });
  doc.text('Nairobi, Kenya', doc.internal.pageSize.getWidth() / 2, 20, { align: 'center' });
  doc.text('Email: info@avopro.co.ke', doc.internal.pageSize.getWidth() / 2, 25, { align: 'center' });

  doc.addImage(qrCodeDataURL, 'PNG', doc.internal.pageSize.getWidth() - 40, 10, 30, 30);
  
  doc.setLineWidth(0.5);
  doc.line(10, 45, doc.internal.pageSize.getWidth() - 10, 45);
};

// --- Reusable Footer Function ---
const addFooter = (doc: jsPDF) => {
    const pageCount = doc.getNumberOfPages();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();

    doc.setFont('helvetica', 'italic');
    doc.setFontSize(8);

    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.text(`Page ${i} of ${pageCount}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
        doc.text('Official document generated by the HR system.', pageWidth - 15, pageHeight - 10, { align: 'right'});
    }
};

// --- Reusable Watermark Function ---
const addWatermark = (doc: jsPDF) => {
  const totalPages = doc.getNumberOfPages();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  doc.setFont('helvetica', 'bolditalic');
  doc.setFontSize(50);
  doc.setTextColor(200, 200, 200);

  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    doc.text('AVOPRO EPZ LIMITED', pageWidth / 2, pageHeight / 2, {
      angle: -45,
      align: 'center',
    } as TextOptionsLight);
  }
  doc.setTextColor(0, 0, 0);
};

/**
 * Generates a professional PDF document for an overtime request.
 * @param request The overtime request object, including user details.
 * @returns A Buffer containing the generated PDF data.
 */
export const generateOvertimePdf = async (request: OvertimeRequestWithUser): Promise<Buffer> => {
  const doc = new jsPDF();
  const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000';
  // Note: We need a public verification page for overtime as well for this to be fully functional
  const verificationUrl = `${baseUrl}/verify/overtime/${request.id}`;
  const qrCodeDataURL = await qrcode.toDataURL(verificationUrl);

  const tableData: TableRow[] = [
    { key: 'Employee Name', value: request.user.name },
    { key: 'Overtime Date', value: new Date(request.date).toLocaleDateString('en-KE') },
    { key: 'Hours Worked', value: request.hours.toString() },
    { key: 'Reason', value: request.reason },
    { key: 'Status', value: request.status },
  ];

  doc.setFontSize(12);
  doc.text('OFFICIAL OVERTIME APPROVAL FORM', doc.internal.pageSize.getWidth() / 2, 60, { align: 'center' });

  autoTable(doc, {
    startY: 70,
    head: [['Field', 'Details']],
    body: tableData.map(row => [row.key, row.value]),
    theme: 'grid',
    didDrawPage: (data) => {
        addHeader(doc, qrCodeDataURL);
    }
  });

  const finalY = (doc as any).lastAutoTable.finalY || 150;
  doc.setFontSize(10);
  doc.text('Signatures:', 20, finalY + 20);
  doc.line(20, finalY + 45, 80, finalY + 45);
  doc.text('Employee', 45, finalY + 50, { align: 'center' });
  
  doc.line(doc.internal.pageSize.getWidth() / 2 - 30, finalY + 45, doc.internal.pageSize.getWidth() / 2 + 30, finalY + 45);
  doc.text('Supervisor', doc.internal.pageSize.getWidth() / 2, finalY + 50, { align: 'center' });

  doc.line(doc.internal.pageSize.getWidth() - 80, finalY + 45, doc.internal.pageSize.getWidth() - 20, finalY + 45);
  doc.text('Human Resources', doc.internal.pageSize.getWidth() - 50, finalY + 50, { align: 'center' });

  addWatermark(doc);
  addFooter(doc);

  return Buffer.from(doc.output('arraybuffer'));
};
