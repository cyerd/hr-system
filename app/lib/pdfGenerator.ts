// app/lib/pdfGenerator.ts

import { jsPDF, TextOptionsLight } from 'jspdf';
import autoTable from 'jspdf-autotable'; // CORRECTED: Import as a default export
import qrcode from 'qrcode';
import { LeaveRequest, User } from '@prisma/client';

// Define a type for the combined request data for clarity
type LeaveRequestWithUser = LeaveRequest & { user: User };

// Define a type for our table rows
type TableRow = { key: string; value: string };

// --- Reusable Header Function ---
const addHeader = (doc: jsPDF, qrCodeDataURL: string) => {
  // Avopro Logo - Placeholder
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(18);
  doc.text('AVOPRO EPZ LIMITED', 20, 20);

  // Company Info in the center
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  doc.text('P.O. Box 12345 - 00100', doc.internal.pageSize.getWidth() / 2, 15, { align: 'center' });
  doc.text('Nairobi, Kenya', doc.internal.pageSize.getWidth() / 2, 20, { align: 'center' });
  doc.text('Email: info@avopro.co.ke', doc.internal.pageSize.getWidth() / 2, 25, { align: 'center' });

  // QR Code on the right
  doc.addImage(qrCodeDataURL, 'PNG', doc.internal.pageSize.getWidth() - 40, 10, 30, 30);
  
  // Line separator
  doc.setLineWidth(0.5);
  doc.line(10, 45, doc.internal.pageSize.getWidth() - 10, 45);
};

// --- Reusable Footer Function ---
const addFooter = (doc: jsPDF) => {
    const pageCount = doc.getNumberOfPages();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();

    doc.setFont('helvetica', 'italic');
    doc.setFontSize(8);

    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.text(`Page ${i} of ${pageCount}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
        doc.text('This is an official document generated by the HR system.', pageWidth - 15, pageHeight - 10, { align: 'right'});
    }
};

// --- Reusable Watermark Function ---
const addWatermark = (doc: jsPDF) => {
  const totalPages = doc.getNumberOfPages();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  doc.setFont('helvetica', 'bolditalic');
  doc.setFontSize(50);
  doc.setTextColor(200, 200, 200); // Light grey color

  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    // Add the watermark text diagonally
    doc.text('AVOPRO EPZ LIMITED', pageWidth / 2, pageHeight / 2, {
      angle: -45,
      align: 'center',
    } as TextOptionsLight);
  }

  // Reset text color
  doc.setTextColor(0, 0, 0);
};


export const generateLeavePdf = async (request: LeaveRequestWithUser): Promise<Buffer> => {
  const doc = new jsPDF();
  const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000';
  const verificationUrl = `${baseUrl}/verify/${request.id}`;
  const qrCodeDataURL = await qrcode.toDataURL(verificationUrl);

  const reportBackDate = new Date(request.endDate);
  reportBackDate.setDate(reportBackDate.getDate() + 1);

  const tableData: TableRow[] = [
    { key: 'Employee Name', value: request.user.name },
    { key: 'Leave Type', value: request.leaveType },
    { key: 'Start Date', value: new Date(request.startDate).toLocaleDateString() },
    { key: 'End Date', value: new Date(request.endDate).toLocaleDateString() },
    { key: 'Report Back Date', value: reportBackDate.toLocaleDateString() },
    { key: 'Reason', value: request.reason },
    { key: 'Status', value: request.status },
  ];

  // --- PDF Generation ---
  doc.setFontSize(12);
  doc.text('OFFICIAL LEAVE APPROVAL FORM', doc.internal.pageSize.getWidth() / 2, 60, { align: 'center' });

  // CORRECTED: Call autoTable as a function, passing the doc instance
  autoTable(doc, {
    startY: 70,
    head: [['Field', 'Details']],
    body: tableData.map(row => [row.key, row.value]),
    theme: 'grid',
    styles: {
      fontSize: 10,
      cellPadding: 3,
    },
    headStyles: {
      fillColor: [22, 160, 133], // A teal color
      textColor: 255,
      fontStyle: 'bold',
    },
    didDrawPage: (data) => {
        // We add headers and footers in didDrawPage to ensure they appear on every page
        addHeader(doc, qrCodeDataURL);
    }
  });

  // --- Add Signature section after the table ---
  const finalY = (doc as any).lastAutoTable.finalY || 150;
  doc.setFontSize(10);
  doc.text('Signatures:', 20, finalY + 20);
  doc.line(20, finalY + 45, 80, finalY + 45); // Employee Signature line
  doc.text('Employee', 45, finalY + 50, { align: 'center' });
  
  doc.line(doc.internal.pageSize.getWidth() / 2 - 30, finalY + 45, doc.internal.pageSize.getWidth() / 2 + 30, finalY + 45); // Supervisor
  doc.text('Supervisor', doc.internal.pageSize.getWidth() / 2, finalY + 50, { align: 'center' });

  doc.line(doc.internal.pageSize.getWidth() - 80, finalY + 45, doc.internal.pageSize.getWidth() - 20, finalY + 45); // HR
  doc.text('Human Resources', doc.internal.pageSize.getWidth() - 50, finalY + 50, { align: 'center' });


  // --- Final Touches ---
  addWatermark(doc);
  addFooter(doc);

  // Return the PDF as a Buffer
  return Buffer.from(doc.output('arraybuffer'));
};

